generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  nickname       String
  password       String?
  refreshToken   String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  comments       Comment[]
  products       Product[]
  articles       Article[] // 사용자가 작성한 게시글
  favoritesCount Int        @default(0)
  favorites      Favorite[]
}

model Product {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  price         Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tags          String[]
  images        String[]
  favoriteCount Int        @default(0)
  comments      Comment[]
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  favorites     Favorite[] // Favorite 모델과의 관계
}

model Article {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  favorites Favorite[] // Favorite 모델과의 관계
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  articleId Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 사용자와 상품의 좋아요는 유일해야 함
  @@unique([userId, articleId]) // 사용자와 게시글의 좋아요는 유일해야 함
}
